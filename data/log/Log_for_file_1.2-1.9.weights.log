############# FILENAME #############
danefake1.2-1.9.dat
####################################
--Parameter scanned:  weights
----Parameter value:  weights  =  distance
------Number of neighbours, k:  2
------All params @: {
n_neighbors: 2  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.49640774  0.50359226]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.40718979  0.59281021]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.76375648  0.23624352]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]]
------Accuracy obtained using cross-validation:  0.99
####################################

------Number of neighbours, k:  3
------All params @: {
n_neighbors: 3  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.64776664  0.35223336]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.56950995  0.43049005]]
Probability of correct assessment (fake data): 
[[ 0.87274435  0.12725565]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.84501733  0.15498267]
 [ 1.          0.        ]
 [ 0.80215736  0.19784264]
 [ 1.          0.        ]
 [ 0.80481549  0.19518451]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.83442681  0.16557319]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.82543131  0.17456869]
 [ 0.84097582  0.15902418]
 [ 1.          0.        ]
 [ 0.8222046   0.1777954 ]
 [ 0.82066549  0.17933451]
 [ 0.81102948  0.18897052]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.90595812  0.09404188]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.85888098  0.14111902]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]]
------Accuracy obtained using cross-validation:  0.96
####################################

------Number of neighbours, k:  4
------All params @: {
n_neighbors: 4  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.21642132  0.78357868]
 [ 0.72322235  0.27677765]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.66133705  0.33866295]]
Probability of correct assessment (fake data): 
[[ 0.8867452   0.1132548 ]
 [ 0.89502578  0.10497422]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.8647319   0.1352681 ]
 [ 1.          0.        ]
 [ 0.6859291   0.3140709 ]
 [ 1.          0.        ]
 [ 0.83232992  0.16767008]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.72017652  0.27982348]
 [ 1.          0.        ]
 [ 0.83252516  0.16747484]
 [ 0.85001594  0.14998406]
 [ 0.86090578  0.13909422]
 [ 0.82648554  0.17351446]
 [ 0.84781814  0.15218186]
 [ 0.69782815  0.30217185]
 [ 0.84082016  0.15917984]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.83527     0.16473   ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.87509954  0.12490046]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]]
------Accuracy obtained using cross-validation:  0.97
####################################

------Number of neighbours, k:  5
------All params @: {
n_neighbors: 5  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.15845089  0.84154911]
 [ 0.          1.        ]
 [ 0.35317676  0.64682324]
 [ 0.59741562  0.40258438]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.71662558  0.28337442]]
Probability of correct assessment (fake data): 
[[ 0.89764835  0.10235165]
 [ 0.90482136  0.09517864]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.87883431  0.12116569]
 [ 0.85199952  0.14800048]
 [ 0.60299181  0.39700819]
 [ 0.92807556  0.07192444]
 [ 0.85182691  0.14817309]
 [ 1.          0.        ]
 [ 0.92040278  0.07959722]
 [ 0.7537069   0.2462931 ]
 [ 0.92059122  0.07940878]
 [ 0.85603354  0.14396646]
 [ 0.74579321  0.25420679]
 [ 0.8759234   0.1240766 ]
 [ 0.70714796  0.29285204]
 [ 0.74179311  0.25820689]
 [ 0.73708429  0.26291571]
 [ 0.86144397  0.13855603]
 [ 1.          0.        ]
 [ 0.86540325  0.13459675]
 [ 0.77819669  0.22180331]
 [ 0.96895494  0.03104506]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.91920007  0.08079993]
 [ 0.88773905  0.11226095]
 [ 0.84491959  0.15508041]
 [ 0.94799423  0.05200577]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.85143708  0.14856292]]
------Accuracy obtained using cross-validation:  0.93
####################################

------Number of neighbours, k:  6
------All params @: {
n_neighbors: 6  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.13725883  0.86274117]
 [ 0.          1.        ]
 [ 0.30331692  0.69668308]
 [ 0.50916924  0.49083076]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.1217408   0.8782592 ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.1064659   0.8935341 ]
 [ 0.61688645  0.38311355]]
Probability of correct assessment (fake data): 
[[ 0.82111534  0.17888466]
 [ 0.91258595  0.08741405]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.79896286  0.20103714]
 [ 0.75416711  0.24583289]
 [ 0.6457805   0.3542195 ]
 [ 0.87454866  0.12545134]
 [ 0.77506745  0.22493255]
 [ 1.          0.        ]
 [ 0.8635234   0.1364766 ]
 [ 0.77535911  0.22464089]
 [ 0.86866884  0.13133116]
 [ 0.87368702  0.12631298]
 [ 0.77301192  0.22698808]
 [ 0.88794341  0.11205659]
 [ 0.74184365  0.25815635]
 [ 0.77001224  0.22998776]
 [ 0.7637009   0.2362991 ]
 [ 0.87718932  0.12281068]
 [ 0.89024354  0.10975646]
 [ 0.8794551   0.1205449 ]
 [ 0.79234169  0.20765831]
 [ 0.94653207  0.05346793]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.92499491  0.07500509]
 [ 0.80616343  0.19383657]
 [ 0.75191107  0.24808893]
 [ 0.9112524   0.0887476 ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.75810403  0.24189597]]
------Accuracy obtained using cross-validation:  0.97
####################################

----Parameter value:  weights  =  uniform
------Number of neighbours, k:  2
------All params @: {
n_neighbors: 2  train_test_ratio: 0.3  weights: uniform  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.5  0.5]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 0.5  0.5]]
Probability of correct assessment (fake data): 
[[ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.5  0.5]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]]
------Accuracy obtained using cross-validation:  0.98
####################################

------Number of neighbours, k:  3
------All params @: {
n_neighbors: 3  train_test_ratio: 0.3  weights: uniform  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.66666667  0.33333333]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.66666667  0.33333333]]
Probability of correct assessment (fake data): 
[[ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]]
------Accuracy obtained using cross-validation:  0.96
####################################

------Number of neighbours, k:  4
------All params @: {
n_neighbors: 4  train_test_ratio: 0.3  weights: uniform  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.25  0.75]
 [ 0.75  0.25]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 1.    0.  ]
 [ 0.    1.  ]
 [ 1.    0.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 1.    0.  ]
 [ 0.    1.  ]
 [ 1.    0.  ]
 [ 0.    1.  ]
 [ 1.    0.  ]
 [ 0.    1.  ]
 [ 0.75  0.25]]
Probability of correct assessment (fake data): 
[[ 0.75  0.25]
 [ 0.75  0.25]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 0.75  0.25]
 [ 1.    0.  ]
 [ 0.5   0.5 ]
 [ 1.    0.  ]
 [ 0.75  0.25]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 0.5   0.5 ]
 [ 1.    0.  ]
 [ 0.75  0.25]
 [ 0.75  0.25]
 [ 0.75  0.25]
 [ 0.75  0.25]
 [ 0.75  0.25]
 [ 0.5   0.5 ]
 [ 0.75  0.25]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 0.5   0.5 ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 0.75  0.25]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]]
------Accuracy obtained using cross-validation:  0.97
####################################

------Number of neighbours, k:  5
------All params @: {
n_neighbors: 5  train_test_ratio: 0.3  weights: uniform  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0]
Fake data prediction:[0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.   1. ]
 [ 0.   1. ]
 [ 0.2  0.8]
 [ 0.   1. ]
 [ 0.4  0.6]
 [ 0.6  0.4]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 0.8  0.2]]
Probability of correct assessment (fake data): 
[[ 0.8  0.2]
 [ 0.8  0.2]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.8  0.2]
 [ 0.8  0.2]
 [ 0.4  0.6]
 [ 0.8  0.2]
 [ 0.8  0.2]
 [ 1.   0. ]
 [ 0.8  0.2]
 [ 0.6  0.4]
 [ 0.8  0.2]
 [ 0.8  0.2]
 [ 0.6  0.4]
 [ 0.8  0.2]
 [ 0.6  0.4]
 [ 0.6  0.4]
 [ 0.6  0.4]
 [ 0.8  0.2]
 [ 1.   0. ]
 [ 0.8  0.2]
 [ 0.4  0.6]
 [ 0.8  0.2]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.8  0.2]
 [ 0.8  0.2]
 [ 0.8  0.2]
 [ 0.8  0.2]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.8  0.2]]
------Accuracy obtained using cross-validation:  0.9
####################################

------Number of neighbours, k:  6
------All params @: {
n_neighbors: 6  train_test_ratio: 0.3  weights: uniform  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.16666667  0.83333333]
 [ 0.          1.        ]
 [ 0.33333333  0.66666667]
 [ 0.5         0.5       ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.16666667  0.83333333]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.16666667  0.83333333]
 [ 0.66666667  0.33333333]]
Probability of correct assessment (fake data): 
[[ 0.66666667  0.33333333]
 [ 0.83333333  0.16666667]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 0.5         0.5       ]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 0.83333333  0.16666667]
 [ 0.66666667  0.33333333]
 [ 0.83333333  0.16666667]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 0.83333333  0.16666667]
 [ 0.83333333  0.16666667]
 [ 0.83333333  0.16666667]
 [ 0.5         0.5       ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.83333333  0.16666667]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]]
------Accuracy obtained using cross-validation:  0.92
####################################

####################################


--Parameter >> weights << summary-table of accuracy (cross-validation): [[ 0.99  0.96  0.97  0.93  0.97]
 [ 0.98  0.96  0.97  0.9   0.92]]
####################################



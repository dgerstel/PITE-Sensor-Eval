############# FILENAME #############
danefake 2-3.dat
####################################
--Parameter scanned:  train_test_ratio
----Parameter value:  train_test_ratio  =  0.3
------Number of neighbours, k:  2
------All params @: {
n_neighbors: 2  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  3
------All params @: {
n_neighbors: 3  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  4
------All params @: {
n_neighbors: 4  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.77432236  0.22567764]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.76892353  0.23107647]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.87902407  0.12097593]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.89470248  0.10529752]
 [ 0.80790348  0.19209652]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.79537838  0.20462162]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.81294084  0.18705916]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.84169091  0.15830909]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  5
------All params @: {
n_neighbors: 5  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.63374379  0.36625621]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.64259719  0.35740281]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.89083417  0.10916583]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.87204211  0.12795789]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.90447977  0.09552023]
 [ 0.6937587   0.3062413 ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.67675555  0.32324445]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.69996233  0.30003767]
 [ 0.93680175  0.06319825]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.86257199  0.13742801]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.89960661  0.10039339]]
------Accuracy obtained using cross-validation:  0.97
####################################

------Number of neighbours, k:  6
------All params @: {
n_neighbors: 6  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.6879563   0.3120437 ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.55298946  0.44701054]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.90042761  0.09957239]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.88581039  0.11418961]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.91224658  0.08775342]
 [ 0.60896753  0.39103247]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.89194748  0.10805252]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.59058895  0.40941105]
 [ 0.90096516  0.09903484]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.61466781  0.38533219]
 [ 0.94030971  0.05969029]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.87807479  0.12192521]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.81965101  0.18034899]]
------Accuracy obtained using cross-validation:  0.97
####################################

----Parameter value:  train_test_ratio  =  0.4
------Number of neighbours, k:  2
------All params @: {
n_neighbors: 2  train_test_ratio: 0.4  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  3
------All params @: {
n_neighbors: 3  train_test_ratio: 0.4  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.68681905  0.31318095]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  4
------All params @: {
n_neighbors: 4  train_test_ratio: 0.4  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.77432236  0.22567764]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.76060765  0.23939235]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  5
------All params @: {
n_neighbors: 5  train_test_ratio: 0.4  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.63374379  0.36625621]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.8039896   0.1960104 ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.91205967  0.08794033]
 [ 0.86934283  0.13065717]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.86140306  0.13859694]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.8754768   0.1245232 ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.89155642  0.10844358]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  6
------All params @: {
n_neighbors: 6  train_test_ratio: 0.4  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.6879563  0.3120437]
 [ 0.         1.       ]
 [ 1.         0.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]
 [ 1.         0.       ]
 [ 0.         1.       ]
 [ 0.684864   0.315136 ]
 [ 0.         1.       ]
 [ 1.         0.       ]
 [ 0.         1.       ]
 [ 0.         1.       ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.91898526  0.08101474]
 [ 0.78184777  0.21815223]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.7699871   0.2300129 ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.7905364   0.2094636 ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.90177942  0.09822058]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.90912094  0.09087906]]
------Accuracy obtained using cross-validation:  1.0
####################################

----Parameter value:  train_test_ratio  =  0.5
------Number of neighbours, k:  2
------All params @: {
n_neighbors: 2  train_test_ratio: 0.5  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  3
------All params @: {
n_neighbors: 3  train_test_ratio: 0.5  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  4
------All params @: {
n_neighbors: 4  train_test_ratio: 0.5  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.77432236  0.22567764]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.78059954  0.21940046]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  5
------All params @: {
n_neighbors: 5  train_test_ratio: 0.5  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.63374379  0.36625621]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.64471896  0.35528104]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  6
------All params @: {
n_neighbors: 6  train_test_ratio: 0.5  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.6879563   0.3120437 ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.69668368  0.30331632]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  1.0
####################################

----Parameter value:  train_test_ratio  =  0.6
------Number of neighbours, k:  2
------All params @: {
n_neighbors: 2  train_test_ratio: 0.6  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  0.99
####################################

------Number of neighbours, k:  3
------All params @: {
n_neighbors: 3  train_test_ratio: 0.6  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  0.99
####################################

------Number of neighbours, k:  4
------All params @: {
n_neighbors: 4  train_test_ratio: 0.6  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.78059954  0.21940046]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.79886926  0.20113074]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.86048154  0.13951846]]
------Accuracy obtained using cross-validation:  0.99
####################################

------Number of neighbours, k:  5
------All params @: {
n_neighbors: 5  train_test_ratio: 0.6  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.64471896  0.35528104]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.85518302  0.14481698]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.82589321  0.17410679]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.87251045  0.12748955]]
------Accuracy obtained using cross-validation:  0.99
####################################

------Number of neighbours, k:  6
------All params @: {
n_neighbors: 6  train_test_ratio: 0.6  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.69668368  0.30331632]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.870583    0.129417  ]
 [ 0.95246917  0.04753083]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.84592452  0.15407548]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.94223922  0.05776078]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.93292258  0.06707742]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.88154936  0.11845064]]
------Accuracy obtained using cross-validation:  0.99
####################################

----Parameter value:  train_test_ratio  =  0.7
------Number of neighbours, k:  2
------All params @: {
n_neighbors: 2  train_test_ratio: 0.7  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  0.96
####################################

------Number of neighbours, k:  3
------All params @: {
n_neighbors: 3  train_test_ratio: 0.7  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  0.96
####################################

------Number of neighbours, k:  4
------All params @: {
n_neighbors: 4  train_test_ratio: 0.7  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 0.79886926  0.20113074]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.86048154  0.13951846]]
------Accuracy obtained using cross-validation:  0.96
####################################

------Number of neighbours, k:  5
------All params @: {
n_neighbors: 5  train_test_ratio: 0.7  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.82089938  0.17910062]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 0.8280374   0.1719626 ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.87251045  0.12748955]]
------Accuracy obtained using cross-validation:  0.96
####################################

------Number of neighbours, k:  6
------All params @: {
n_neighbors: 6  train_test_ratio: 0.7  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.70039815  0.29960185]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 0.84818418  0.15181582]
 [ 0.9227931   0.0772069 ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.93292258  0.06707742]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.9349122   0.0650878 ]
 [ 0.88154936  0.11845064]]
------Accuracy obtained using cross-validation:  0.96
####################################

----Parameter value:  train_test_ratio  =  0.8
------Number of neighbours, k:  2
------All params @: {
n_neighbors: 2  train_test_ratio: 0.8  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.  1.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 1.  0.]
 [ 0.  1.]
 [ 0.  1.]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  0.95
####################################

------Number of neighbours, k:  3
------All params @: {
n_neighbors: 3  train_test_ratio: 0.8  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.70689737  0.29310263]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  0.95
####################################

------Number of neighbours, k:  4
------All params @: {
n_neighbors: 4  train_test_ratio: 0.8  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.77168571  0.22831429]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]
 [ 1.  0.]]
------Accuracy obtained using cross-validation:  0.95
####################################

------Number of neighbours, k:  5
------All params @: {
n_neighbors: 5  train_test_ratio: 0.8  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.81227051  0.18772949]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.87862062  0.12137938]]
------Accuracy obtained using cross-validation:  0.95
####################################

------Number of neighbours, k:  6
------All params @: {
n_neighbors: 6  train_test_ratio: 0.8  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.68999158  0.31000842]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.88927738  0.11072262]]
------Accuracy obtained using cross-validation:  0.95
####################################

####################################


--Parameter >> train_test_ratio << summary-table of accuracy (cross-validation): [[ 1.    1.    1.    0.97  0.97]
 [ 1.    1.    1.    1.    1.  ]
 [ 1.    1.    1.    1.    1.  ]
 [ 0.99  0.99  0.99  0.99  0.99]
 [ 0.96  0.96  0.96  0.96  0.96]
 [ 0.95  0.95  0.95  0.95  0.95]]
####################################



############# FILENAME #############
danefake 1-2.dat
####################################
--Parameter scanned:  weights
----Parameter value:  weights  =  distance
------Number of neighbours, k:  2
------All params @: {
n_neighbors: 2  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.44434381  0.55565619]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.55791473  0.44208527]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.48778744  0.51221256]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.69842859  0.30157141]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.71955698  0.28044302]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.53879025  0.46120975]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.44857757  0.55142243]
 [ 1.          0.        ]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  3
------All params @: {
n_neighbors: 3  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.31063933  0.68936067]
 [ 0.          1.        ]
 [ 0.31822537  0.68177463]
 [ 0.67842878  0.32157122]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.65367327  0.34632673]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.75892382  0.24107618]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.77421986  0.22578014]
 [ 1.          0.        ]
 [ 0.79014922  0.20985078]
 [ 0.39951992  0.60048008]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.6052845   0.3947155 ]
 [ 1.          0.        ]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  4
------All params @: {
n_neighbors: 4  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.23913627  0.76086373]
 [ 0.          1.        ]
 [ 0.47344295  0.52655705]
 [ 0.7425105   0.2574895 ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.73698331  0.26301669]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.83213894  0.16786106]
 [ 0.81235299  0.18764701]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.79761894  0.20238106]
 [ 0.81787417  0.18212583]
 [ 0.84708361  0.15291639]
 [ 0.65729321  0.34270679]
 [ 1.          0.        ]
 [ 0.82385532  0.17614468]
 [ 0.52284005  0.47715995]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.89452845  0.10547155]
 [ 1.          0.        ]
 [ 0.47761407  0.52238593]
 [ 1.          0.        ]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  5
------All params @: {
n_neighbors: 5  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.19465459  0.80534541]
 [ 0.          1.        ]
 [ 0.5628615   0.4371385 ]
 [ 0.62087509  0.37912491]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.1586866   0.8413134 ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 0.90584739  0.09415261]
 [ 1.          0.        ]
 [ 0.60288012  0.39711988]
 [ 0.93077686  0.06922314]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.91430384  0.08569616]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.85531386  0.14468614]
 [ 0.70096295  0.29903705]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.68863655  0.31136345]
 [ 0.71792716  0.28207284]
 [ 0.73531195  0.26468805]
 [ 0.70213955  0.29786045]
 [ 1.          0.        ]
 [ 0.8472647   0.1527353 ]
 [ 0.44070256  0.55929744]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.81126385  0.18873615]
 [ 0.85365572  0.14634428]
 [ 0.56784709  0.43215291]
 [ 1.          0.        ]]
------Accuracy obtained using cross-validation:  0.97
####################################

------Number of neighbours, k:  6
------All params @: {
n_neighbors: 6  train_test_ratio: 0.3  weights: distance  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.16959626  0.83040374]
 [ 0.          1.        ]
 [ 0.48183449  0.51816551]
 [ 0.5337578   0.4662422 ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.13815326  0.86184674]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 0.9128482   0.0871518 ]
 [ 0.89769467  0.10230533]
 [ 0.51645885  0.48354115]
 [ 0.87823994  0.12176006]
 [ 1.          0.        ]
 [ 0.88528219  0.11471781]
 [ 0.95069068  0.04930932]
 [ 0.9210003   0.0789997 ]
 [ 1.          0.        ]
 [ 0.95653433  0.04346567]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.89099711  0.10900289]
 [ 0.87217537  0.12782463]
 [ 0.73537817  0.26462183]
 [ 1.          0.        ]
 [ 0.89852604  0.10147396]
 [ 0.61197955  0.38802045]
 [ 0.74827676  0.25172324]
 [ 0.75955705  0.24044295]
 [ 0.62725862  0.37274138]
 [ 0.92629533  0.07370467]
 [ 0.86383894  0.13616106]
 [ 0.38363374  0.61636626]
 [ 0.93293498  0.06706502]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.90313282  0.09686718]
 [ 1.          0.        ]
 [ 0.82533429  0.17466571]
 [ 0.87199794  0.12800206]
 [ 0.487899    0.512101  ]
 [ 0.88139844  0.11860156]]
------Accuracy obtained using cross-validation:  0.98
####################################

----Parameter value:  weights  =  uniform
------Number of neighbours, k:  2
------All params @: {
n_neighbors: 2  train_test_ratio: 0.3  weights: uniform  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 0 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.   1. ]
 [ 0.   1. ]
 [ 0.5  0.5]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.5  0.5]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 0.   1. ]]
Probability of correct assessment (fake data): 
[[ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.5  0.5]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.5  0.5]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.5  0.5]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.5  0.5]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.5  0.5]
 [ 1.   0. ]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  3
------All params @: {
n_neighbors: 3  train_test_ratio: 0.3  weights: uniform  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.33333333  0.66666667]
 [ 0.          1.        ]
 [ 0.33333333  0.66666667]
 [ 0.66666667  0.33333333]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 0.33333333  0.66666667]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  4
------All params @: {
n_neighbors: 4  train_test_ratio: 0.3  weights: uniform  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.25  0.75]
 [ 0.    1.  ]
 [ 0.5   0.5 ]
 [ 0.75  0.25]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 1.    0.  ]
 [ 0.    1.  ]
 [ 1.    0.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]
 [ 1.    0.  ]
 [ 0.    1.  ]
 [ 1.    0.  ]
 [ 0.    1.  ]
 [ 1.    0.  ]
 [ 0.    1.  ]
 [ 0.    1.  ]]
Probability of correct assessment (fake data): 
[[ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 0.75  0.25]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 0.75  0.25]
 [ 0.75  0.25]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 0.75  0.25]
 [ 0.75  0.25]
 [ 0.75  0.25]
 [ 0.5   0.5 ]
 [ 1.    0.  ]
 [ 0.75  0.25]
 [ 0.5   0.5 ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 1.    0.  ]
 [ 0.75  0.25]
 [ 1.    0.  ]
 [ 0.5   0.5 ]
 [ 1.    0.  ]]
------Accuracy obtained using cross-validation:  1.0
####################################

------Number of neighbours, k:  5
------All params @: {
n_neighbors: 5  train_test_ratio: 0.3  weights: uniform  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.   1. ]
 [ 0.   1. ]
 [ 0.2  0.8]
 [ 0.   1. ]
 [ 0.6  0.4]
 [ 0.6  0.4]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 1.   0. ]
 [ 0.   1. ]
 [ 0.2  0.8]]
Probability of correct assessment (fake data): 
[[ 1.   0. ]
 [ 0.8  0.2]
 [ 1.   0. ]
 [ 0.6  0.4]
 [ 0.8  0.2]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.8  0.2]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.8  0.2]
 [ 0.6  0.4]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.6  0.4]
 [ 0.6  0.4]
 [ 0.6  0.4]
 [ 0.6  0.4]
 [ 1.   0. ]
 [ 0.8  0.2]
 [ 0.4  0.6]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 1.   0. ]
 [ 0.6  0.4]
 [ 0.8  0.2]
 [ 0.6  0.4]
 [ 1.   0. ]]
------Accuracy obtained using cross-validation:  0.96
####################################

------Number of neighbours, k:  6
------All params @: {
n_neighbors: 6  train_test_ratio: 0.3  weights: uniform  metric: minkowski  algorithm: auto }
Sensor data prediction: (1 = good, 0 = bad)[1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1]
Fake data prediction:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]
Probability of correct assessment (sensor data):
[1st column: bad | 2nd column: good]
[[ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.16666667  0.83333333]
 [ 0.          1.        ]
 [ 0.5         0.5       ]
 [ 0.5         0.5       ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 1.          0.        ]
 [ 0.          1.        ]
 [ 0.16666667  0.83333333]]
Probability of correct assessment (fake data): 
[[ 1.          0.        ]
 [ 0.83333333  0.16666667]
 [ 0.83333333  0.16666667]
 [ 0.5         0.5       ]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 0.83333333  0.16666667]
 [ 0.83333333  0.16666667]
 [ 0.83333333  0.16666667]
 [ 1.          0.        ]
 [ 0.83333333  0.16666667]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.83333333  0.16666667]
 [ 0.83333333  0.16666667]
 [ 0.66666667  0.33333333]
 [ 1.          0.        ]
 [ 0.83333333  0.16666667]
 [ 0.5         0.5       ]
 [ 0.66666667  0.33333333]
 [ 0.66666667  0.33333333]
 [ 0.5         0.5       ]
 [ 0.83333333  0.16666667]
 [ 0.83333333  0.16666667]
 [ 0.33333333  0.66666667]
 [ 0.83333333  0.16666667]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.        ]
 [ 0.83333333  0.16666667]
 [ 1.          0.        ]
 [ 0.66666667  0.33333333]
 [ 0.83333333  0.16666667]
 [ 0.5         0.5       ]
 [ 0.83333333  0.16666667]]
------Accuracy obtained using cross-validation:  0.97
####################################

####################################


--Parameter >> weights << summary-table of accuracy (cross-validation): [[ 1.    1.    1.    0.97  0.98]
 [ 1.    1.    1.    0.96  0.97]]
####################################


